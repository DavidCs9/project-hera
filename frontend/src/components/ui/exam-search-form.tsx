import { Search, Loader2, AlertCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useForm } from "react-hook-form";
import { useQuery } from "@tanstack/react-query";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { useState } from "react";
import {
  Form,
  FormControl,
  FormLabel,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/ui/form";
import { trpc } from "@/utils/trpc";

export default ExamSearchForm;

const searchFormSchema = z.object({
  firstLastName: z.string({
    required_error: "El apellido paterno es requerido",
  }),
  secondLastName: z.string({
    required_error: "El apellido materno es requerido",
  }),
  names: z.string({
    required_error: "El nombre es requerido",
  }),
});

type SearchFormValues = z.infer<typeof searchFormSchema>;

function ExamSearchForm() {
  const [searchParams, setSearchParams] = useState<SearchFormValues | null>(
    null
  );
  const form = useForm<SearchFormValues>({
    resolver: zodResolver(searchFormSchema),
    mode: "onChange",
    defaultValues: {
      firstLastName: "",
      secondLastName: "",
      names: "",
    },
  });

  const onSubmit = (data: SearchFormValues) => {
    setSearchParams(data);
  };

  // const { data, isLoading, isError, error } = useQuery({
  //   queryKey: ["exam", searchParams],
  //   queryFn: () =>
  //     trpc.exam.getByFullName.queryOptions({
  //       name: searchParams?.names ?? "",
  //       firstLastName: searchParams?.firstLastName ?? "",
  //       secondLastName: searchParams?.secondLastName ?? "",
  //     }),
  //   enabled: !!searchParams,
  //   refetchOnMount: false,
  //   refetchOnWindowFocus: true,
  // });

  const { data, isLoading, isError, error } = useQuery({
    // 1. Spread the options generated by tRPC (contains queryKey and queryFn)
    ...trpc.exam.getByFullName.queryOptions({
      name: searchParams?.names ?? "",
      firstLastName: searchParams?.firstLastName ?? "",
      secondLastName: searchParams?.secondLastName ?? "",
    }),
    // 2. Add your react-query specific options here
    enabled: !!searchParams, // Enable only when searchParams exist
    // refetchOnMount: false, // Optional
    // refetchOnWindowFocus: true, // Optional
  });

  return (
    <Card className="w-full shadow-lg h-fit">
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <FormField
                control={form.control}
                name="firstLastName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Apellido Paterno</FormLabel>
                    <FormControl>
                      <Input placeholder="Ejemplo: Perez" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="secondLastName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Apellido Materno</FormLabel>
                    <FormControl>
                      <Input placeholder="Ejemplo: Gomez" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="names"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nombre (s)</FormLabel>
                    <FormControl>
                      <Input placeholder="Ejemplo: Juan" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <Button
              type="submit"
              className="w-full bg-cyan-600 hover:bg-cyan-700"
              disabled={isLoading}
            >
              {isLoading ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <Search className="mr-2 h-4 w-4" />
              )}
              {isLoading ? "Buscando..." : "Buscar Resultados de Exámenes"}
            </Button>
          </form>
        </Form>

        {isError && (
          <Alert variant="destructive" className="mt-4">
            <AlertDescription>
              {error instanceof Error
                ? error.message
                : "Error al buscar el paciente"}
            </AlertDescription>
          </Alert>
        )}
        {data &&
          data?.map(
            (exam: {
              patient: {
                name: string;
                firstLastName: string;
                secondLastName: string;
                age: number;
                gender: "male" | "female";
                bedNumber: number;
                primaryService: string;
              } | null;
            }) => (
              <div className="mt-6 bg-white/50 p-4 rounded-lg space-y-4">
                <h3 className="font-semibold text-lg border-b pb-2">
                  Información del Paciente
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-muted-foreground">
                      Nombre completo
                    </p>
                    <p className="font-medium">
                      {exam.patient?.name} {exam.patient?.firstLastName}{" "}
                      {exam.patient?.secondLastName}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">
                      Edad / Género
                    </p>
                    <p className="font-medium">
                      {exam.patient?.age} años /{" "}
                      {exam.patient?.gender === "male"
                        ? "Masculino"
                        : "Femenino"}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">
                      Número de Cama
                    </p>
                    <p className="font-medium">{exam.patient?.bedNumber}</p>
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">
                      Servicio Principal
                    </p>
                    <p className="font-medium">
                      {exam.patient?.primaryService === "urology"
                        ? "Urología"
                        : exam.patient?.primaryService === "hematology"
                        ? "Hematología"
                        : exam.patient?.primaryService === "cardiology"
                        ? "Cardiología"
                        : exam.patient?.primaryService}
                    </p>
                  </div>
                </div>
              </div>
            )
          )}

        {!isLoading && !isError && !data && searchParams && (
          <Alert className="mt-4">
            <AlertDescription className="flex items-center gap-2">
              <AlertCircle className="h-4 w-4" />
              No se encontró ningún paciente con los datos proporcionados
            </AlertDescription>
          </Alert>
        )}
      </CardContent>
    </Card>
  );
}
